const Product = require('../models/Product');
const cloudinary = require('../config/cloudinary');

// L·∫•y danh s√°ch s·∫£n ph·∫©m
exports.getAllProducts = async (req, res) => {
    try {
        const products = await Product.findAll({
            attributes: ['id', 'image_url', 'name', 'price', 'stock', 'category_id']
        });
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m', error });
    }
};

// T·∫°o s·∫£n ph·∫©m m·ªõi
exports.createProduct = async (req, res) => {
    try {
        console.log("üì∏ File nh·∫≠n ƒë∆∞·ª£c:", req.file); // Ki·ªÉm tra ·∫£nh c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng

        if (!req.file) {
            return res.status(400).json({ message: 'Vui l√≤ng upload ·∫£nh!' });
        }

        const result = await cloudinary.uploader.upload(req.file.path, { folder: 'products' });

        res.json({ message: 'Upload th√†nh c√¥ng!', url: result.secure_url });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói upload ·∫£nh', error: error.message });
    }
};

// L·∫•y s·∫£n ph·∫©m theo ID
exports.getProductById = async (req, res) => {
    try {
        const product = await Product.findByPk(req.params.id);
        if (!product) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
        res.json(product);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói l·∫•y s·∫£n ph·∫©m', error: error.message });
    }
};

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m
exports.updateProduct = async (req, res) => {
    try {
        const { name, price, description, stock, category_id } = req.body;
        const product = await Product.findByPk(req.params.id);
        if (!product) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });

        let newImageUrl = product.image_url;
        if (req.file) {
            // X√≥a ·∫£nh c≈© tr√™n Cloudinary n·∫øu c√≥
            const publicId = product.image_url.split('/').pop().split('.')[0];
            await cloudinary.uploader.destroy(`products/${publicId}`);

            // Upload ·∫£nh m·ªõi l√™n Cloudinary
            const result = await cloudinary.uploader.upload(req.file.path, { folder: 'products' });
            newImageUrl = result.secure_url;
        }

        await product.update({ name, price, description, stock, category_id, image_url: newImageUrl });
        res.json({ message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng', product });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m', error: error.message });
    }
};

// X√≥a s·∫£n ph·∫©m
exports.deleteProduct = async (req, res) => {
    try {
        const product = await Product.findByPk(req.params.id);
        if (!product) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });

        // X√≥a ·∫£nh tr√™n Cloudinary
        const publicId = product.image_url.split('/').pop().split('.')[0];
        await cloudinary.uploader.destroy(`products/${publicId}`);

        await product.destroy();
        res.json({ message: 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói x√≥a s·∫£n ph·∫©m', error: error.message });
    }
};
